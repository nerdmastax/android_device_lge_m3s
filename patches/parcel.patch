From: Vinson Gates <phenomx49850@gmail.com>
Date: Thur, 22 Aug 2013 07:50:07 -0600
Subject: [PATCH] binder: patch for parcel for some RIL's that need it

This is a patch needed for some RIL's to make the radio functional in CM10. You need to add 

"RIL_NEED_PARCEL_PATCH := true" into your Boardconfig to make this patch effective.

diff --git a/native/include/binder/Parcel.h b/native/include/binder/Parcel.h
--- /frameworks/native/include/binder/Parcel.h
+++ /frameworks/native/include/binder/Parcel.h
@@ -76,6 +76,9 @@
     // passed in.
     bool                enforceInterface(const String16& interface,
                                          IPCThreadState* threadState = NULL) const;
+#ifdef _INTERNAL_BINDER_PARCEL_
+    bool                enforceInterface(const String16& interface) const;
+#endif
     bool                checkInterface(IBinder*) const;
 
     void                freeData();
diff --git a/frameworks/native/libs/binder/Android.mk b/frameworks/native/libs/binder/Android.mk
--- /frameworks/native/libs/binder/Android.mk
+++ /frameworks/native/libs/binder/Android.mk
@@ -38,6 +38,12 @@
     sources += MemoryHeapIon.cpp
 endif
 
+# Needed for some rils
+ifeq ($(RIL_NEED_PARCEL_PATCH),true)
+    LOCAL_CFLAGS += -DRIL_NEED_PARCEL_PATCH
+endif
+
+
 LOCAL_PATH:= $(call my-dir)
 
 # Note about gingerbread compatibility : Require a global cflag,
diff --git a/frameworks/native/libs/binder/Parcel.cpp b/frameworks/native/libs/binder/Parcel.cpp
--- /frameworks/native/libs/binder/Parcel.cpp
+++ /frameworks/native/libs/binder/Parcel.cpp
@@ -16,7 +16,9 @@
 
 #define LOG_TAG "Parcel"
 //#define LOG_NDEBUG 0
-
+#ifdef RIL_NEED_PARCEL_PATCH
+#define _INTERNAL_BINDER_PARCEL_
+#endif
 #include <binder/Parcel.h>
 
 #include <binder/IPCThreadState.h>
@@ -446,7 +448,13 @@
 
     return err;
 }
-
+#ifdef RIL_NEED_PARCEL_PATCH
+extern "C" Parcel *_ZN7android6Parcel10appendFromEPKS0_jj(Parcel *This, const Parcel *parcel, size_t offset, size_t len);
+extern "C" Parcel *_ZN7android6Parcel10appendFromEPS0_jj(Parcel *This, Parcel *parcel, size_t offset, size_t len)
+{
+    return _ZN7android6Parcel10appendFromEPKS0_jj(This, parcel, offset, len);
+}
+#endif
 bool Parcel::pushAllowFds(bool allowFds)
 {
     const bool origValue = mAllowFds;
@@ -477,10 +485,20 @@
     // currently the interface identification token is just its name as a string
     return writeString16(interface);
 }
+#ifdef RIL_NEED_PARCEL_PATCH
+bool Parcel::enforceInterface(const String16& interface) const
+{
+	return enforceInterface(interface,NULL);
+}
+#endif
 
 bool Parcel::checkInterface(IBinder* binder) const
 {
+#ifdef RIL_NEED_PARCEL_PATCH
+    return enforceInterface(binder->getInterfaceDescriptor(),NULL);
+#else
     return enforceInterface(binder->getInterfaceDescriptor());
+#endif
 }
 
 bool Parcel::enforceInterface(const String16& interface,
